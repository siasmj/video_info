---
http_interactions:
- request:
    method: head
    uri: https://vimeo.com/74636562
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - VideoInfo/3.0.1
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '185077'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 14 Nov 2021 22:28:34 GMT
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v17254-2nh26
      Via:
      - 1.1 varnish, 1.1 varnish, 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-b-15
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 15 Nov 2021 10:28:34 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5171-BWI, cache-cgh11177-CGH
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1636972115.624218,VS0,VE244
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: UTF-8
      string: ''
    http_version:
  recorded_at: Mon, 15 Nov 2021 10:28:34 GMT
- request:
    method: get
    uri: https://vimeo.com/74636562
    body:
      encoding: US-ASCII
      string: ''
    headers:
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
      User-Agent:
      - Ruby
  response:
    status:
      code: 200
      message: OK
    headers:
      Connection:
      - keep-alive
      Content-Length:
      - '40370'
      Server:
      - nginx
      Content-Type:
      - text/html; charset=UTF-8
      Expires:
      - Sun, 14 Nov 2021 22:28:35 GMT
      X-Ua-Compatible:
      - IE=edge
      X-Xss-Protection:
      - 1; mode=block
      X-Content-Type-Options:
      - nosniff
      X-Frame-Options:
      - sameorigin
      Strict-Transport-Security:
      - max-age=31536000; includeSubDomains; preload
      Content-Security-Policy-Report-Only:
      - 'default-src https: data: blob: wss: ''unsafe-inline'' ''unsafe-eval''; report-uri
        /_csp'
      X-Bapp-Server:
      - pweb-v17253-kq6t4
      Via:
      - 1.1 varnish, 1.1 varnish, 1.1 varnish
      Cache-Control:
      - no-store, no-cache, must-revalidate, post-check=0, pre-check=0
      X-Varnish-Cache:
      - '0'
      X-Vserver:
      - infra-webproxy-b-15
      X-Vimeo-Dc:
      - ge
      Accept-Ranges:
      - bytes
      Date:
      - Mon, 15 Nov 2021 10:28:35 GMT
      Age:
      - '0'
      X-Served-By:
      - cache-bwi5136-BWI, cache-cgh11125-CGH
      X-Cache:
      - MISS, MISS
      X-Cache-Hits:
      - 0, 0
      X-Timer:
      - S1636972115.061722,VS0,VE266
      Vary:
      - User-Agent,Accept-Encoding
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        
    http_version:
  recorded_at: Mon, 15 Nov 2021 10:28:35 GMT
recorded_with: VCR 3.0.3
